/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package imu.view;

import gnu.io.NoSuchPortException;
import gnu.io.PortInUseException;
import gnu.io.UnsupportedCommOperationException;
import imu.controller.CapturadorIMU;
import imu.controller.CapturadorIMUListener;
import imu.controller.KalmanFilter;
import imu.model.InfoIMU;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dav
 */
public class IMUViewer extends javax.swing.JFrame implements CapturadorIMUListener {

    CapturadorIMU controlador;
    KalmanFilter fc;

    /**
     * Creates new form IMUViewer
     */
    public IMUViewer() {
        initComponents();
        fc = new KalmanFilter();


        controlador = new CapturadorIMU();
        controlador.setListener(this);

        try {
            controlador.iniciar();
        } catch (Exception ex) {
            ex.printStackTrace();
        }


//        graficoBean1.agregarValor("SerieHola", WIDTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graficoAcelerometro = new imu.view.GraficoSerieXY();
        graficoGiroscopio = new imu.view.GraficoSerieXY();
        graficoFiltro = new imu.view.GraficoSerieXY();
        graficoSerieComparacion = new imu.view.GraficoSerieXY();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(2, 2));

        graficoAcelerometro.setTitulo("Acelerometros");

        javax.swing.GroupLayout graficoAcelerometroLayout = new javax.swing.GroupLayout(graficoAcelerometro);
        graficoAcelerometro.setLayout(graficoAcelerometroLayout);
        graficoAcelerometroLayout.setHorizontalGroup(
            graficoAcelerometroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        graficoAcelerometroLayout.setVerticalGroup(
            graficoAcelerometroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        getContentPane().add(graficoAcelerometro);

        graficoGiroscopio.setTitulo("Giroscopios");

        javax.swing.GroupLayout graficoGiroscopioLayout = new javax.swing.GroupLayout(graficoGiroscopio);
        graficoGiroscopio.setLayout(graficoGiroscopioLayout);
        graficoGiroscopioLayout.setHorizontalGroup(
            graficoGiroscopioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        graficoGiroscopioLayout.setVerticalGroup(
            graficoGiroscopioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        getContentPane().add(graficoGiroscopio);

        graficoFiltro.setTitulo("Filtro Kalman");

        javax.swing.GroupLayout graficoFiltroLayout = new javax.swing.GroupLayout(graficoFiltro);
        graficoFiltro.setLayout(graficoFiltroLayout);
        graficoFiltroLayout.setHorizontalGroup(
            graficoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        graficoFiltroLayout.setVerticalGroup(
            graficoFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        getContentPane().add(graficoFiltro);

        graficoSerieComparacion.setTitulo("Comparación señal original y filtrada");

        javax.swing.GroupLayout graficoSerieComparacionLayout = new javax.swing.GroupLayout(graficoSerieComparacion);
        graficoSerieComparacion.setLayout(graficoSerieComparacionLayout);
        graficoSerieComparacionLayout.setHorizontalGroup(
            graficoSerieComparacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        graficoSerieComparacionLayout.setVerticalGroup(
            graficoSerieComparacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        getContentPane().add(graficoSerieComparacion);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IMUViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IMUViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IMUViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IMUViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new IMUViewer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private imu.view.GraficoSerieXY graficoAcelerometro;
    private imu.view.GraficoSerieXY graficoFiltro;
    private imu.view.GraficoSerieXY graficoGiroscopio;
    private imu.view.GraficoSerieXY graficoSerieComparacion;
    // End of variables declaration//GEN-END:variables
    int i = 0;

    @Override
    public void nuevaInformacionIMU(final InfoIMU nuevaInfo) {

        // Acelerometro
        graficoAcelerometro.agregarValor("X", nuevaInfo.getAccelerometerX());
        graficoAcelerometro.agregarValor("Y", nuevaInfo.getAccelerometerY());
        graficoAcelerometro.agregarValor("Z", nuevaInfo.getAccelerometerZ());

        // Giros
        graficoGiroscopio.agregarValor("Pitch", nuevaInfo.getGiroX());
        graficoGiroscopio.agregarValor("Roll", nuevaInfo.getGiroY());
        graficoGiroscopio.agregarValor("Yaw", nuevaInfo.getGiroZ());

        // Filtrado
        double[] filtrar = new double[3];
        try {
            filtrar = fc.filtrar(nuevaInfo);
        } catch (Exception e) {
            e.printStackTrace();
        }

        graficoFiltro.agregarValor("X", filtrar[0]);
        graficoFiltro.agregarValor("Y", filtrar[1]);
        graficoFiltro.agregarValor("Z", filtrar[2]);


        double[] original = {nuevaInfo.getAccelerometerX(), nuevaInfo.getAccelerometerY(), nuevaInfo.getAccelerometerZ()};
        KalmanFilter.normalize3DVector(original);

        graficoSerieComparacion.agregarValor("Original", original[0]);
        graficoSerieComparacion.agregarValor("Filtrado", filtrar[0]);

    }
}
